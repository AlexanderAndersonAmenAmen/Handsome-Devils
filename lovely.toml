[manifest]
version = "1.0.0"
priority = 0

# -----------------------------------
# Perfectionist
# -----------------------------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.hands_played_at_create = G.GAME and G.GAME.hands_played or 0"
position = "after"
match_indent = true
payload = '''
if old_center and old_center.set == "Enhanced" and center.set == "Enhanced" and self.area ~= G.deck then
    if G.jokers.cards then for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].config.center.key == "j_hnds_perfectionist" then
            self.ability.perma_mult = self.ability.perma_mult or 0
            self.ability.perma_mult = self.ability.perma_mult + G.P_CENTERS["j_hnds_perfectionist"].config.extra.mult
            card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex'), colour = G.C.MULT})
            G.E_MANAGER:add_event(Event({
                func = function()
                    G.jokers.cards[i]:juice_up(0.6)
                return true end
            }))
        end
    end
    end
end
'''

# -----------------------------------
# Black Seal
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before = true})
'''
position = "before"
payload = '''
SMODS.calculate_context({full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, hnds_pre_before = true})
'''
match_indent = true
times = 1

# -----------------------------------
# Head of Medusa
# -----------------------------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    self.children.front:draw_shader('dissolve')
'''
position = "at"
payload = '''
elseif self.ability.effect == 'Stone Card' and self.hnds_petrifying then
    self.children.front:draw_shader('dissolve')
'''
match_indent = true
times = 1

# -----------------------------------
# Stone Ocean
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
-- TARGET: main scoring on played cards
'''
position = "after"
payload = '''

if SMODS.has_enhancement(card, "m_stone") then
    G.GAME.ante_stones_scored = G.GAME.ante_stones_scored + 1
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
check_and_set_high_score('furthest_ante', G.GAME.round_resets.ante)
'''
position = "after"
payload = '''
G.GAME.ante_stones_scored = 0
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = '''
hand[self.key] = math.max(hand['s_'..self.key] + hand['l_'..self.key]*(hand.level - 1), 0)
'''
position = "at"
payload = '''
hand[self.key] = math.max(hand[self.key] + hand['l_'..self.key]*amount, 0)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS.c_base)
'''
position = "after"
payload = '''
if v.enhancement then
    card:set_ability(G.P_CENTERS[v.enhancement])
end
'''
match_indent = true
times = 1