[manifest]
version = "1.0.0"
priority = 0


# -----------------------------------
# Black Seal
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
for j=1, #G.jokers.cards do
    eval_card(G.jokers.cards[j], {cardarea = G.jokers, remove_playing_cards = true, removed = cards_destroyed})
end
'''
position = "before"
payload = '''
for i=1, #G.hand.cards do
    if G.hand.cards[i].seal == "hnds_black" then
        local destroyed = nil
    
        for j = 1, #G.jokers.cards do
            local eval, post = eval_card(G.jokers.cards[j], {destroying_card = G.hand.cards[i], full_hand = G.play.cards})
            SMODS.trigger_effects({eval, post}, G.hand.cards[i])
            if eval.jokers then destroyed = true end
        end

        if SMODS.has_enhancement(G.hand.cards[i], 'm_glass') and G.hand.cards[i]:can_calculate() and SMODS.pseudorandom_probability(G.hand.cards[i], 'glass', 1, G.hand.cards[i].ability.name == 'Glass Card' and G.hand.cards[i].ability.extra or G.P_CENTERS.m_glass.config.extra) then
            destroyed = true
        end

        local eval, post = eval_card(G.hand.cards[i], {destroying_card = G.hand.cards[i], full_hand = G.play.cards, G.hand.cards = G.hand.cards, scoring_name = text, poker_hands = poker_hands, cardarea = G.play})
        local self_destroy = false
        for key, effect in pairs(eval) do
            self_destroy = SMODS.calculate_effect(effect, G.hand.cards[i])
        end
        SMODS.trigger_effects({post}, G.hand.cards[i])
        if self_destroy then destroyed = true end
        if destroyed then 
            if G.hand.cards[i].ability.name == 'Glass Card' then 
                G.hand.cards[i].shattered = true
            else 
                G.hand.cards[i].destroyed = true
            end 
            cards_destroyed[#cards_destroyed+1] = G.hand.cards[i]
        end
    end
end
'''
match_indent = true
times = 1

# -----------------------------------
# Head of Medusa
# -----------------------------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    self.children.front:draw_shader('dissolve')
'''
position = "at"
payload = '''
elseif self.ability.effect == 'Stone Card' and self.hnds_petrifying then
    self.children.front:draw_shader('dissolve')
'''
match_indent = true
times = 1

# -----------------------------------
# Stone Ocean
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
-- TARGET: main scoring on played cards
'''
position = "after"
payload = '''

if SMODS.has_enhancement(card, "m_stone") then
    G.GAME.ante_stones_scored = G.GAME.ante_stones_scored + 1
end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
check_and_set_high_score('furthest_ante', G.GAME.round_resets.ante)
'''
position = "after"
payload = '''
G.GAME.ante_stones_scored = 0
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = '''
hand[self.key] = math.max(hand['s_'..self.key] + hand['l_'..self.key]*(hand.level - 1), 0)
'''
position = "at"
payload = '''
hand[self.key] = math.max(hand[self.key] + hand['l_'..self.key]*amount, 0)
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
local card = Card(0,0, 0.5*G.CARD_W, 0.5*G.CARD_H, G.P_CARDS[v[1]], G.P_CENTERS.c_base)
'''
position = "after"
payload = '''
if v.enhancement then
    card:set_ability(G.P_CENTERS[v.enhancement])
end
'''
match_indent = true
times = 1
